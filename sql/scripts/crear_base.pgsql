-- Script de creaci칩n de las tablas de la base InnovaApp.
create table innobus.persona
(
    persona_id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    num_carnet int not null,
    nombre1 text not null,
    nombre2 text,
    apellido1 text not null,
    apellido2 text not null,
    es_activo boolean not null default true,

    unique(num_carnet)
);

create table innobus.tipo_usuario
(
    tipo_usuario_id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre text NOT NULL,
    es_activo boolean NOT NULL DEFAULT TRUE,
    unique(nombre)
);

create table innobus.usuario
(
    usuario_id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    persona_fk int not null,
    tipo_usuario_fk int not null,
    username text not null,
    passwd_hash text not null,
    saldo money not null,
    es_activo boolean NOT NULL DEFAULT TRUE,

    unique(username),

    constraint fk_constr_persona
    -- Foreign key: persona -> usuario
    foreign key(persona_fk) 
    references innobus.persona(persona_id)
    on delete no action
    on update no action,

    constraint fk_constr_tipo_usuario
    -- Foreign key: tipo_usuario -> usuario
    foreign key(tipo_usuario_fk)
    references innobus.tipo_usuario(tipo_usuario_id)
    on delete no action
    on update no action
);

create table innobus.autobus
(
    autobus_id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    placa text not null,
    modelo text not null,
    es_activo boolean NOT NULL DEFAULT TRUE,

    unique(placa)
);

create table innobus.ruta
(
    ruta_id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre text not null,
    es_activo boolean NOT NULL DEFAULT TRUE
);

-- Provincia cant칩n y distrito no tienen PK generado autom치ticamente, dado que
-- sus datos se insertan de un .csv
create table innobus.provincia
(
    provincia_id int PRIMARY KEY,
    nombre text not null,
    es_activo boolean NOT NULL DEFAULT TRUE
);

create table innobus.canton
(
    canton_id int PRIMARY KEY,
    provincia_fk int not null,
    nombre text not null,
    es_activo boolean NOT NULL DEFAULT TRUE,

    constraint fk_provincia
    -- Foreign key: canton -> provincia
    foreign key(provincia_fk)
    references innobus.provincia(provincia_id)
    on delete no action
    on update no action
);

create table innobus.distrito
(
    distrito_id int primary key,
    canton_fk int not null,
    nombre text not null,
    es_activo boolean NOT NULL DEFAULT TRUE,

    constraint fk_canton
    -- Foreign key: distrito -> cant칩n
    foreign key(canton_fk)
    references innobus.canton(canton_id)
    on delete no action
    on update no action
);

create table innobus.parada
(
    parada_id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ruta_fk int not null,
    distrito_fk int not null,
    orden int not null,
    nombre text not null,
    descripcion text not null,
    costo money not null,
    lat_y_long point not null,
    es_activo boolean NOT NULL DEFAULT TRUE,

    constraint fk_parada_ruta
    -- Foreign key: parada -> ruta
    foreign key(ruta_fk)
    references innobus.ruta(ruta_id)
    on delete no action
    on update no action,

    constraint fk_parada_distrito
    -- Foreign key: parada -> distrito
    foreign key(distrito_fk)
    references innobus.distrito(distrito_id)
    on delete no action
    on update no action
);

create table innobus.transferencia
(
    transferencia_id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    emisor_fk int not null,
    receptor_fk int not null,
    monto money not null,
    mensaje text not null,
    fecha_y_hora timestamp not null,
    es_activo boolean NOT NULL DEFAULT TRUE,

    constraint fk_trasf_emisor
    -- Foreign key: transferencia -> usuario emisor
    foreign key(emisor_fk)
    references innobus.usuario(usuario_id)
    on delete no action
    on update no action,

    constraint fk_trasf_receptor
    -- Foreign key: transferencia -> usuario receptor
    foreign key(receptor_fk)
    references innobus.usuario(usuario_id)
    on delete no action
    on update no action
);

create table innobus.viaje
(
    viaje_id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    chofer_fk int not null,
    autobus_fk int not null,
    ruta_fk int not null,
    fecha_partida timestamp not null,
    fecha_llegada timestamp not null,
    es_ida boolean not null,
    es_activo boolean NOT NULL DEFAULT TRUE,

    constraint fk_viaje_chofer
    -- Foreign key: viaje -> usuario chofer
    foreign key(chofer_fk)
    references innobus.usuario(usuario_id)
    on delete no action
    on update no action,

    constraint fk_viaje_autobus
    -- Foreign key: viaje -> autobus
    foreign key(autobus_fk)
    references innobus.autobus(autobus_id)
    on delete no action
    on update no action,

    constraint fk_viaje_ruta
    -- Foreign key: viaje -> ruta
    foreign key(ruta_fk)
    references innobus.ruta(ruta_id)
    on delete no action
    on update no action
);

create table innobus.pasajero_por_viaje
(
    viaje_id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    pasajero_fk int not null,
    viaje_fk int not null,
    parada_fk int not null,
    hora_abordaje timestamp not null,
    hora_desmontado timestamp not null,
    es_activo boolean NOT NULL DEFAULT TRUE,

    constraint fk_pasporvia_pasajero
    -- Foreign key: pasajero por viaje -> usuario pasajero
    foreign key(pasajero_fk)
    references innobus.usuario(usuario_id)
    on delete no action
    on update no action,

    constraint fk_pasporvia_viaje
    -- Foreign key: pasajero por viaje -> viaje
    foreign key(viaje_fk)
    references innobus.viaje(viaje_id)
    on delete no action
    on update no action,

    constraint fk_pasporvia_parada
    -- Foreign key: pasajero por viaje -> parada
    foreign key(parada_fk)
    references innobus.parada(parada_id)
    on delete no action
    on update no action
);